title: Story Anti-Patterns 1
author: Matt Van Horn
date: 2011/11/06

# Anti-Pattern 1 - Visual design isn't the whole story.

## Example 1 - _the team is using Pivotal Tracker as a to-do list_
 
    Add styling to product page.
  
In teams that have stories like this, there are probably a few others that look like:

    Clicking on product title directs user to to product page

    Product page shows detailed description and product specs

    User clicks buy now button on product page
    
## Example 2 - _all the business value attached to the wrong thing for the wrong role_

    As the designer  
    I want a well-designed product page  
    In order to encourage purchases

Here, the team is trying to find the value, but they are looking in the wrong place for it. 
This is an example of thinking about "what do I want the user to do?" instead of "what does the user want to do?"

### Forces leading to the use of this anti-pattern:

 * The team is using Pivotal Tracker (or their equivalent tool) to track to-do items, instead of tracking the stakeholder conversations it was meant for. 
 * The visual designers are not working on the same team as the software developers (stovepiping).
 * UI design and graphic asset production is being done in a big-design-up-front fashion.
 * The user is lacking representation in the agile process
 * The development team feels pressured to put points on the board.

### Problems caused by this anti-pattern:

  When this pattern becomes common, you wind up with an application that spends most of its time not ready for deployment. 
  If the demo gets rescheduled two weeks earlier, there's a good chance you won't be able to show many features in a complete state.
  Punchlists that need to be completed in order to deploy is the opposite of agile practice.
  
  Another issue this pattern leads to is programmers waiting on designers, or vice versa. Again - not very agile.
  
  Lastly, when software development is iterating, but UI design and/or production is handled as a page-at-a-time waterfall, 
  the mismatch leads to gross inefficiencies in how the look & feel gets implemented - bloated CSS, endless tweaking of styles, etc.

##Solutions:

  * Use story templates that enforce business value consideration
  * Use iterative development in ui design as well as programming
  * Designers and developers work together on the same stories until they are done.

### Using better story templates

Story templates need to show three important things:

  * Business value
  * The role that benefits from the value
  * The feature necessary to provide the value

The above story could become:

  > In order to _**more easily make a purchase decision**_  
  > _**the customer**_  
  > wants to see _**a well-designed product details page**_
  > 
  > Given an existing product named "Foo"  
  > When the customer visits the product page for "Foo"  
  > Then the customer should see the product details for "Foo"  
  > And the page should be styled according to the current design specifications for the product page

Notice that there are no implementation details exposed in the story or scenario. This prevents brittle tests. 
If what is meant by "product details" changes, this is a change in requirements that will force a change in
the implementation of the step, but not a change in the story.
The last step could be implemented using matchers for such ui requirements as:
All headlines should be blue, and all body copy should be 16px high. This then becomes a reusable step that can
help catch look & feel flaws on other pages, as well.


